/*******************************************************************************
 *
 * This software was developed at the National Institute of Standards and
 * Technology (NIST) by employees of the Federal Government in the course of
 * their official duties. Pursuant to title 17 Section 105 of the United States
 * Code, this software is not subject to copyright protection and is in the
 * public domain. NIST assumes no responsibility whatsoever for its use by other
 * parties, and makes no guarantees, expressed or implied, about its quality,
 * reliability, or any other characteristic.
 *
 * This software can be redistributed and/or modified freely provided that any
 * derivative works bear some notice that they are derived from it, and any
 * modified versions bear some notice that they have been modified.
 *
 * Author(s): Scott Arneson (NIST)
 *
 * Description: This software was developed to facilitate communication through
 * a one-way data diode. This software is installed on computers on either side
 * of the data diode and will, using configuration files, gather data from
 * Modbus enabled devices, transfer the data across the data diode to a
 * receiving computer, and then transfer the received data to a database server.
 * 
 ******************************************************************************/
package gui;

import codec.GlobalDataHandler;
import devices.ModbusDevice;
import devices.RecorderAbstract;
import java.awt.Color;

/**
 *
 * @author Scott Arneson
 */
public class dbSetup extends javax.swing.JFrame {

    /**
     * Creates new form dbSetup
     */
    public dbSetup() {
        initComponents();
        this.setLocationRelativeTo(null);
        jErrorLabel.setVisible(false);
        String value = GlobalDataHandler.getInstance().getDatabaseURL();
        if ((value != null) && (!value.isEmpty())) {
            jDBIPAddress.setText(value);
        }
        value = GlobalDataHandler.getInstance().getDatabaseUsername();
        if ((value != null) && (!value.isEmpty())) {
            jDBUsername.setText(value);
        }
        GlobalDataHandler.getInstance().setDbsetup(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonConnect = new javax.swing.JButton();
        jDBPassword = new javax.swing.JPasswordField();
        jDBIPAddress = new javax.swing.JTextField();
        jDBUsername = new javax.swing.JTextField();
        jDBIPAddressLabel = new javax.swing.JLabel();
        jDBUsernameLabel = new javax.swing.JLabel();
        jDBPasswordLabel = new javax.swing.JLabel();
        jErrorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Database Information");
        setAlwaysOnTop(true);
        setResizable(false);

        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jDBIPAddressLabel.setText("IP Address:");

        jDBUsernameLabel.setText("Username:");

        jDBPasswordLabel.setText("Password:");

        jErrorLabel.setForeground(java.awt.Color.red);
        jErrorLabel.setText("Could not connect to database!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jErrorLabel)
                        .addGap(0, 58, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDBIPAddressLabel)
                            .addComponent(jDBUsernameLabel)
                            .addComponent(jDBPasswordLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jDBUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                                .addComponent(jDBIPAddress)
                                .addComponent(jDBPassword)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jErrorLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDBIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDBIPAddressLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDBUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDBUsernameLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDBPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDBPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonConnect)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Boolean accepted = true;
        String dbURL = jDBIPAddress.getText();
        String dbUser = jDBUsername.getText();
        String dbPass = jDBPassword.getText();
        if ((dbURL != null) && (!dbURL.isEmpty())) {
            GlobalDataHandler.getInstance().setDatabaseURL(dbURL);
        } else {
            accepted = false;
            jDBIPAddressLabel.setForeground(Color.red);
        }
        if ((dbUser != null) && (!dbUser.isEmpty())) {
            GlobalDataHandler.getInstance().setDatabaseUsername(dbUser);
        } else {
            accepted = false;
            jDBUsernameLabel.setForeground(Color.red);
        }
        if ((dbPass != null) && (!dbPass.isEmpty())) {
            GlobalDataHandler.getInstance().setDatabasePassword(dbPass);
        } else {
            accepted = false;
            jDBPasswordLabel.setForeground(Color.red);
        }
        if (!accepted) {
            jErrorLabel.setText("All fields must be filled in!");
            jErrorLabel.setVisible(true);
            this.setLocationRelativeTo(null);
            this.setVisible(true);
        } else {
            jErrorLabel.setVisible(false);
            jDBIPAddressLabel.setForeground(Color.black);
            jDBUsernameLabel.setForeground(Color.black);
            jDBPasswordLabel.setForeground(Color.black);
            GlobalDataHandler.getInstance().saveSettings();
            for (RecorderAbstract recorder : GlobalDataHandler.getInstance().getRecorders()) {
                recorder.dbConnect();
            }
            for (ModbusDevice device : GlobalDataHandler.getInstance().getModbusDevices()) {
                device.dbConnect();
            }
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JTextField jDBIPAddress;
    private javax.swing.JLabel jDBIPAddressLabel;
    private javax.swing.JPasswordField jDBPassword;
    private javax.swing.JLabel jDBPasswordLabel;
    private javax.swing.JTextField jDBUsername;
    private javax.swing.JLabel jDBUsernameLabel;
    public javax.swing.JLabel jErrorLabel;
    // End of variables declaration//GEN-END:variables
}
