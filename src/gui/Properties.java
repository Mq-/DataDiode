/*******************************************************************************
 *
 * This software was developed at the National Institute of Standards and
 * Technology (NIST) by employees of the Federal Government in the course of
 * their official duties. Pursuant to title 17 Section 105 of the United States
 * Code, this software is not subject to copyright protection and is in the
 * public domain. NIST assumes no responsibility whatsoever for its use by other
 * parties, and makes no guarantees, expressed or implied, about its quality,
 * reliability, or any other characteristic.
 *
 * This software can be redistributed and/or modified freely provided that any
 * derivative works bear some notice that they are derived from it, and any
 * modified versions bear some notice that they have been modified.
 *
 * Author(s): Scott Arneson (NIST)
 *
 * Description: This software was developed to facilitate communication through
 * a one-way data diode. This software is installed on computers on either side
 * of the data diode and will, using configuration files, gather data from
 * Modbus enabled devices, transfer the data across the data diode to a
 * receiving computer, and then transfer the received data to a database server.
 * 
 ******************************************************************************/
package gui;

import codec.GlobalDataHandler;

/**
 *
 * @author engineer
 */
public class Properties extends javax.swing.JFrame {

    /**
     * Creates new form Properties
     */
    public Properties() {
        initComponents();
        this.setLocationRelativeTo(null);
        jErrorLabel.setVisible(false);
        jDataGatheringInterval.setText(GlobalDataHandler.getInstance()
                .getDataGatherInterval().toString());
        GlobalDataHandler.getInstance().setProperties(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDataGatheringIntervalLabel = new javax.swing.JLabel();
        jDataGatheringInterval = new javax.swing.JTextField();
        jButtonSet = new javax.swing.JButton();
        jErrorLabel = new javax.swing.JLabel();
        jMsecLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Properties");
        setAlwaysOnTop(true);

        jDataGatheringIntervalLabel.setText("Data Gathering Interval:");

        jDataGatheringInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDataGatheringIntervalActionPerformed(evt);
            }
        });

        jButtonSet.setText("Set");
        jButtonSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetActionPerformed(evt);
            }
        });

        jErrorLabel.setForeground(java.awt.Color.red);
        jErrorLabel.setText("Must enter an integer value!");

        jMsecLabel.setText("msec");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jErrorLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDataGatheringIntervalLabel)
                                .addGap(18, 18, 18)
                                .addComponent(jDataGatheringInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(2, 2, 2)
                        .addComponent(jMsecLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jButtonSet, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jErrorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDataGatheringIntervalLabel)
                    .addComponent(jMsecLabel)
                    .addComponent(jDataGatheringInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonSet)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        String value = jDataGatheringInterval.getText();
        Boolean numeric = true;
        for (char c : value.toCharArray()) {
            if (!Character.isDigit(c)) {
                numeric = false;
            }
        }
        if (numeric) {
            GlobalDataHandler.getInstance().setDataGatherInterval(Integer.parseInt(value));
            GlobalDataHandler.getInstance().saveSettings();
            jErrorLabel.setVisible(false);
        } else {
            jErrorLabel.setVisible(true);
            this.setLocationRelativeTo(null);
            this.setVisible(true);
        }
    }//GEN-LAST:event_jButtonSetActionPerformed

    private void jDataGatheringIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDataGatheringIntervalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jDataGatheringIntervalActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSet;
    private javax.swing.JTextField jDataGatheringInterval;
    private javax.swing.JLabel jDataGatheringIntervalLabel;
    private javax.swing.JLabel jErrorLabel;
    private javax.swing.JLabel jMsecLabel;
    // End of variables declaration//GEN-END:variables
}
