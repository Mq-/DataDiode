/*******************************************************************************
 *
 * This software was developed at the National Institute of Standards and
 * Technology (NIST) by employees of the Federal Government in the course of
 * their official duties. Pursuant to title 17 Section 105 of the United States
 * Code, this software is not subject to copyright protection and is in the
 * public domain. NIST assumes no responsibility whatsoever for its use by other
 * parties, and makes no guarantees, expressed or implied, about its quality,
 * reliability, or any other characteristic.
 *
 * This software can be redistributed and/or modified freely provided that any
 * derivative works bear some notice that they are derived from it, and any
 * modified versions bear some notice that they have been modified.
 *
 * Author(s): Scott Arneson (NIST)
 *
 * Description: This software was developed to facilitate communication through
 * a one-way data diode. This software is installed on computers on either side
 * of the data diode and will, using configuration files, gather data from
 * Modbus enabled devices, transfer the data across the data diode to a
 * receiving computer, and then transfer the received data to a database server.
 * 
 ******************************************************************************/
package gui;

import codec.DataDiodeLogger;
import codec.DataDiodeLogger.log;
import codec.GlobalDataHandler;
import communicators.ReceiveSerialStrategy;
import communicators.SendSerialStrategy;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javolution.context.ConcurrentContext;
import strategies.Anode;
import strategies.Cathode;

/**
 *
 * @author Scott Arneson
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        String function = GlobalDataHandler.getInstance().getFunction();
        if (function.equalsIgnoreCase("Transmit")) {
            jButtonDatabase.setVisible(false);
        } else if (function.equalsIgnoreCase("Receive") || function.equalsIgnoreCase("Recieve")) {
            jButtonProperties.setVisible(false);
        }
        DataDiodeLogger.getInstance().setupTextArea(jTextAreaConsole);
        DataDiodeLogger.getInstance().setupTimeLastSent(jLabelTimeLastSent);
        GlobalDataHandler.getInstance().setMainframe(this);
        DataDiodeLogger.getInstance().addLogs(log.NORMAL, "Ready");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaConsole = new javax.swing.JTextArea();
        jButtonStop = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();
        jButtonProperties = new javax.swing.JButton();
        jButtonDatabase = new javax.swing.JButton();
        jLabelStatusLabel = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jLabelTimeLastSentLabel = new javax.swing.JLabel();
        jLabelTimeLastSent = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jTextAreaConsole.setColumns(20);
        jTextAreaConsole.setRows(5);
        jScrollPane1.setViewportView(jTextAreaConsole);

        jButtonStop.setForeground(java.awt.Color.red);
        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        jButtonStart.setForeground(java.awt.Color.green);
        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jButtonProperties.setText("Properties");
        jButtonProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPropertiesActionPerformed(evt);
            }
        });

        jButtonDatabase.setText("Database");
        jButtonDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDatabaseActionPerformed(evt);
            }
        });

        jLabelStatusLabel.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabelStatusLabel.setText("Status:");

        jLabelStatus.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabelStatus.setForeground(java.awt.Color.red);
        jLabelStatus.setText("Not Running");

        jLabelTimeLastSentLabel.setText("Time Last Data Sent:");

        jLabelTimeLastSent.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabelTimeLastSent.setText("N/A");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonStop, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonProperties))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonDatabase)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelStatus)
                .addGap(94, 94, 94)
                .addComponent(jLabelTimeLastSentLabel)
                .addGap(18, 18, 18)
                .addComponent(jLabelTimeLastSent)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jButtonProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStatusLabel)
                    .addComponent(jLabelStatus)
                    .addComponent(jLabelTimeLastSentLabel)
                    .addComponent(jLabelTimeLastSent))
                .addContainerGap())
        );

        jLabelStatus.getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        // TODO add your handling code here:
        if (!GlobalDataHandler.getInstance().getDiodeRun()) {
            //Begin diode function
            String function = GlobalDataHandler.getInstance().getFunction();
            if (function != null) {
                ConcurrentContext ctx = GlobalDataHandler.getInstance().getCtx();
                if (function.equalsIgnoreCase("Transmit")) {
                    Anode anode = new Anode();
                    GlobalDataHandler.getInstance().setDiodeRun(true);

                    //Start function
                    DataDiodeLogger.getInstance().addLogs(log.NORMAL, "Starting anode (Transmitter) function.");
                    ctx.execute(anode);
                    DataDiodeLogger.getInstance().addLogs(log.NORMAL, "Running.");
                    jLabelStatus.setText("Running");
                    jLabelStatus.setForeground(Color.green);
                } else if (function.equalsIgnoreCase("Receive") || function.equalsIgnoreCase("Recieve")) {
                    Cathode cathode = new Cathode();
                    GlobalDataHandler.getInstance().setDiodeRun(true);

                    //Start function
                    DataDiodeLogger.getInstance().addLogs(log.NORMAL, "Starting cathode (Receiver) function.");
                    ctx.execute(cathode);
                    DataDiodeLogger.getInstance().addLogs(log.NORMAL, "Running.");
                    jLabelStatus.setText("Running");
                    jLabelStatus.setForeground(Color.green);
                }
            }
        }
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        stopAcquisition();
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void stopAcquisition() {
        // TODO add your handling code here:
        if (GlobalDataHandler.getInstance().getDiodeRun()) {
            GlobalDataHandler.getInstance().setDiodeRun(false);
            String function = GlobalDataHandler.getInstance().getFunction();
            if (function.equalsIgnoreCase("Transmit")) {
                SendSerialStrategy sender = (SendSerialStrategy) GlobalDataHandler
                        .getInstance().getCommunicator1();
                sender.close();
                sender = (SendSerialStrategy) GlobalDataHandler
                        .getInstance().getCommunicator2();
                sender.close();
                sender = (SendSerialStrategy) GlobalDataHandler
                        .getInstance().getCommunicator3();
                sender.close();
            } else if (function.equalsIgnoreCase("Receive") || function.equalsIgnoreCase("Recieve")) {
                ReceiveSerialStrategy receiver = (ReceiveSerialStrategy) GlobalDataHandler
                        .getInstance().getCommunicator1();
                receiver.close();
                receiver = (ReceiveSerialStrategy) GlobalDataHandler
                        .getInstance().getCommunicator2();
                receiver.close();
                receiver = (ReceiveSerialStrategy) GlobalDataHandler
                        .getInstance().getCommunicator3();
                receiver.close();
            }
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            DataDiodeLogger.getInstance().addLogs(log.NORMAL, "Stopped.");
            jLabelStatus.setText("Not Running");
            jLabelStatus.setForeground(Color.red);
        }
    }

    private void jButtonPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPropertiesActionPerformed
        // TODO add your handling code here:
        GlobalDataHandler.getInstance().getProperties().setLocationRelativeTo(null);
        GlobalDataHandler.getInstance().getProperties().setVisible(true);
    }//GEN-LAST:event_jButtonPropertiesActionPerformed

    private void jButtonDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDatabaseActionPerformed
        // TODO add your handling code here:
        GlobalDataHandler.getInstance().getDbsetup().setLocationRelativeTo(null);
        GlobalDataHandler.getInstance().getDbsetup().setVisible(true);
    }//GEN-LAST:event_jButtonDatabaseActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
//       / stopAcquisition();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        stopAcquisition();
    }//GEN-LAST:event_formWindowClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDatabase;
    private javax.swing.JButton jButtonProperties;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelStatusLabel;
    private javax.swing.JLabel jLabelTimeLastSent;
    private javax.swing.JLabel jLabelTimeLastSentLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaConsole;
    // End of variables declaration//GEN-END:variables
}
